{"ast":null,"code":"var _jsxFileName = \"/Users/veraweikel/src/sandbox/legacy/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 7\n  },\n  __self: this\n}), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// Liam Egan\n// 2019\n\nlet initialise = function () {\n  let application = new Application(); // application.scaleFactor = 2;\n  // application.clearOnRedraw = Application.FADE;\n\n  application.fadeColour = 'rgba(0,0,0,.12)';\n  application.fillColour = 'rgba(30,30,30,1)';\n  application.onResize();\n  let vfield = new VectorField();\n  vfield.scale = 800;\n  vfield.amplitude = 10; // vfield.debug = true;\n\n  application.addActor(vfield);\n  let maxNum = 100;\n  let num = 0;\n\n  let addTracer = (position, colour) => {\n    if (num > maxNum) return;\n    let tracer = new BranchTracer(position.x, position.y);\n    tracer.field = vfield;\n    let momentum = new Vector(Math.random(), Math.random());\n    momentum.length = Math.random() * 2;\n    tracer.momentum = momentum;\n    tracer.friction = 0.97;\n\n    if (colour) {\n      tracer.colour = colour;\n    } else {\n      tracer.colour = 'RGBA(' + 100 + Math.round(Math.random() * 155) + ',' + 100 + Math.round(Math.random() * 155) + ',255,0.5)';\n    }\n\n    application.addActor(tracer);\n    num = application.actors.length;\n    return tracer;\n  };\n\n  let seed = addTracer(new Vector(window.innerWidth / 2, window.innerHeight / 2), 'RGBA(255, 100, 100, 0.5)');\n  seed.initial = true;\n  seed.branchChance = 5;\n  seed.friction = 0.985;\n  seed.onBranch = addTracer;\n  setInterval(() => {\n    vfield.z = Math.random() * 10000;\n  }, 10000);\n  let stage = application.stage;\n  document.body.appendChild(stage);\n  application.onPointerMove({\n    clientX: window.innerWidth / 2,\n    clientY: window.innerHeight / 2\n  });\n  application.render();\n  application.animating = true; // application.runFor(60 * 120);\n\n  return;\n};\n\nclass Application {\n  constructor() {\n    this.stage = document.createElement('canvas');\n    this.animate = this.animate.bind(this);\n    this.onResize = this.onResize.bind(this);\n    this.onPointerDown = this.onPointerDown.bind(this);\n    this.onPointerup = this.onPointerup.bind(this);\n    this.onPointerMove = this.onPointerMove.bind(this);\n    this.initialiseEvents();\n  }\n\n  initialiseEvents() {\n    window.addEventListener('resize', this.onResize, false);\n    document.addEventListener('pointerdown', this.onPointerDown, false);\n    document.addEventListener('pointerup', this.onPointerup, false);\n    document.addEventListener('pointermove', this.onPointerMove, false);\n  }\n\n  deInitialiseEvents() {\n    window.removeEventListener('resize', this.onResize, false);\n    document.removeEventListener('pointerdown', this.onPointerDown, false);\n    document.removeEventListener('pointerup', this.onPointerup, false);\n    document.removeEventListener('pointermove', this.onPointerMove, false);\n  }\n\n  addActor(actor) {\n    if (actor instanceof Actor) {\n      this.actors.push(actor);\n    }\n  }\n\n  runFor(ticks) {\n    let interval = 1 / 60;\n    let i = 0;\n\n    for (i; i < ticks; i++) {\n      this.triggerEvent('application-animate', {\n        now: this.now,\n        then: this.then,\n        interval: interval,\n        application: this\n      });\n      this.render();\n    }\n  }\n\n  animate(delta) {\n    this.now = Date.now();\n    let interval = this.now - this.then;\n    this.triggerEvent('application-animate', {\n      now: this.now,\n      then: this.then,\n      interval: interval,\n      application: this\n    });\n    this.render(delta);\n    this.then = this.now; // remove dead actors\n\n    if (delta - this.removalTest > 5000 || !this.removalTest) {\n      this.removalTest = delta;\n\n      for (let i = this.actors.length - 1; i >= 0; i--) {\n        if (this.actors[i].dead === true) {\n          this.actors.splice(i, 1);\n        }\n      }\n    }\n\n    if (this.animating) {\n      requestAnimationFrame(this.animate);\n    }\n  }\n\n  render(delta) {\n    let dims = this.dimensions;\n\n    if (this.animatingOut) {\n      this.opacity += .02;\n      if (this.opacity >= 1) this.animatingOut = false;\n      this.context.fillStyle = \"rgba(10,10,10,\".concat(this.opacity);\n      this.context.fillRect(0, 0, dims.width, dims.height);\n    }\n\n    if (this.clearOnRedraw == Application.CLEAR) {\n      this.context.clearRect(0, 0, dims.width, dims.height);\n    } else if (this.clearOnRedraw == Application.FADE) {\n      this.context.fillStyle = this.fadeColour;\n      this.context.fillRect(0, 0, dims.width, dims.height);\n    }\n\n    this.actors.forEach(actor => {\n      actor.render(this);\n    });\n  }\n\n  onResize(e) {\n    this.dimensions = new Vector(window.innerWidth * 2, window.innerHeight * 2);\n  }\n\n  onPointerDown(e) {}\n\n  onPointerup(e) {}\n\n  onPointerMove(e) {\n    let pointer = new Vector(e.clientX, e.clientY);\n    this.triggerEvent('application-pointermove', {\n      pointer: pointer\n    });\n  }\n\n  triggerEvent(event, data) {\n    if (window.CustomEvent) {\n      var event = new CustomEvent(event, {\n        detail: data\n      });\n    } else {\n      var event = document.createEvent('CustomEvent');\n      event.initCustomEvent(event, true, true, data);\n    }\n\n    document.dispatchEvent(event);\n  }\n\n  get actors() {\n    if (!this._actors) this._actors = [];\n    return this._actors;\n  }\n\n  set scaleFactor(value) {\n    if (value >= 1) {\n      this._scaleFactor = value;\n      this.onResize();\n    }\n  }\n\n  get scaleFactor() {\n    return this._scaleFactor || 1;\n  }\n\n  set dimensions(value) {\n    if (value instanceof Vector) {\n      value.scale(this.scaleFactor);\n      this.stage.width = value.width;\n      this.stage.height = value.height;\n      this.context.fillStyle = this.fillColour;\n      this.context.fillRect(0, 0, this.dimensions.width, this.dimensions.height);\n      this._dimensions = value;\n    }\n  }\n\n  get dimensions() {\n    return this._dimensions || new Vector(0, 0);\n  }\n\n  set stage(value) {\n    if (value instanceof HTMLCanvasElement) {\n      value.className = this.className;\n      this._stage = value;\n      this.context = this.stage.getContext('2d');\n      this.context.fillStyle = this.fillColour;\n      this.context.fillRect(0, 0, this.dimensions.width, this.dimensions.height);\n      this.onResize();\n    }\n  }\n\n  get stage() {\n    return this._stage || null;\n  }\n\n  set now(value) {\n    if (!isNaN(value)) this._now = value;\n  }\n\n  get now() {\n    return this._now || 0;\n  }\n\n  set then(value) {\n    if (!isNaN(value)) this._then = value;\n  }\n\n  get then() {\n    return this._then || 0;\n  }\n\n  set animating(value) {\n    if (value === true && this.animating !== true) {\n      this._animating = true;\n      this.now = Date.now();\n      this.then = this.now;\n      requestAnimationFrame(this.animate);\n    }\n  }\n\n  get animating() {\n    return this._animating === true;\n  }\n\n  set fadeColour(value) {\n    this._fadeColour = value;\n  }\n\n  get fadeColour() {\n    return this._fadeColour || 'rgba(255,255,255,.5)';\n  }\n\n  set fillColour(value) {\n    this._fillColour = value;\n  }\n\n  get fillColour() {\n    return this._fillColour || 'rgba(255,255,255,1)';\n  }\n\n  set clearOnRedraw(value) {\n    if ([Application.NOCLEAR, Application.CLEAR, Application.FADE].indexOf(value) > -1) {\n      this._clearOnRedraw = value;\n    }\n  }\n\n  get clearOnRedraw() {\n    return this._clearOnRedraw || Application.NOCLEAR;\n  }\n\n  get className() {\n    return 'drawer';\n  }\n\n}\n\nApplication.NOCLEAR = 0;\nApplication.CLEAR = 1;\nApplication.FADE = 2;\n\nclass Actor {\n  constructor(x, y, w, h) {\n    this.dimensions = new Vector(w, h);\n    this.position = new Vector(x, y);\n  }\n\n  render() {}\n\n  set dimensions(value) {\n    if (value instanceof Vector) this._dimensions = value;\n  }\n\n  get dimensions() {\n    return this._dimensions || new Vector(0, 0);\n  }\n\n  set position(value) {\n    if (value instanceof Vector) this._position = value;\n  }\n\n  get position() {\n    return this._position || new Vector(0, 0);\n  }\n\n}\n\nclass VectorField extends Actor {\n  constructor(x = 0, y = 0, w = 0, h = 0) {\n    super(x, y, w, h);\n    this.noise = new Noise();\n    this.helpers = [];\n    this.mousepos = new Vector(0, 0);\n    this.onResize = this.onResize.bind(this);\n    this.onPointerMove = this.onPointerMove.bind(this); // document.addEventListener('application-pointermove', this.onPointerMove, false);\n\n    window.addEventListener('resize', this.onResize);\n    this.onResize();\n  }\n\n  render(application) {\n    this.helpers.forEach(helper => {\n      helper.render(application);\n    });\n  }\n\n  preDraw() {}\n\n  postDraw() {}\n\n  solveForPosition(v) {\n    if (!v instanceof Vector) return;\n    v = v.clone();\n    v.x -= window.innerWidth / 2;\n    v.y -= window.innerHeight / 2;\n    let scale = this.scale;\n    let amp = this.amplitude; //     let waveform = new Vector(Math.cos(v.x / scale) * amp, Math.sin(v.y / scale) * amp);\n    //     return new Vector(waveform.y - waveform.x, -waveform.x - waveform.y);\n\n    let envelope = this.amplitude;\n    let noise = this.noise.noise(v.x / scale, v.y / scale, this.z) * scale;\n    if (noise > envelope) noise = envelope;\n    if (noise < -envelope) noise = -envelope;\n    let noise1 = this.noise.noise(v.y / scale, v.x / scale, this.z / scale);\n    let transV = new Vector(1, 0);\n    transV.length = noise;\n    transV.angle = noise1 * 10;\n    return transV; // let transv = v.subtractNew(this.mousepos);\n    // transv = new Vector(transv.y - transv.x, -transv.x - transv.y);\n    // transv.length *= 0.03;\n    // if(transv.length > 50) {\n    //   transv.length = 50;\n    // }\n    // transv.length -= 50;\n    // transv.length *= -1;\n    // return transv;\n  }\n\n  onPointerMove(e) {\n    this.mousepos = e.detail.pointer;\n    this.helpers.forEach(helper => {\n      helper.vector = this.solveForPosition(helper.position);\n    });\n  }\n\n  onResize(e) {\n    if (!this.debug) return;\n    this.helpers.forEach(helper => {\n      helper.destroy();\n    });\n    this.helpers = [];\n    let w = this.sampleWidth;\n    let curpos = new Vector(0, 0);\n\n    while (curpos.y < window.innerHeight + w) {\n      curpos.x = 0;\n\n      while (curpos.x < window.innerWidth + w) {\n        this.helpers.push(new Arrow(curpos.x, curpos.y, 10, 10, this.solveForPosition(curpos)));\n        curpos.x += w;\n      }\n\n      curpos.y += w;\n    }\n  }\n\n  set scale(value) {\n    if (value > 0) {\n      this._scale = value;\n    }\n  }\n\n  get scale() {\n    return this._scale || 500;\n  }\n\n  set amplitude(value) {\n    if (value > 0) {\n      this._amplitude = value;\n    }\n  }\n\n  get amplitude() {\n    return this._amplitude || 10;\n  }\n\n  set sampleWidth(value) {\n    if (value > 0) this._sampleWidth = value;\n  }\n\n  get sampleWidth() {\n    return this._sampleWidth || 30;\n  }\n\n  set z(value) {\n    if (value > 0) this._z = value;\n  }\n\n  get z() {\n    return this._z || 30;\n  }\n\n  set mousepos(value) {\n    if (value instanceof Vector) this._mousepos = value;\n  }\n\n  get mousepos() {\n    return this._mousepos || new Vector(0, 0);\n  }\n\n  set debug(value) {\n    this._debug = value === true;\n  }\n\n  get debug() {\n    return this._debug === true;\n  }\n\n  get strokeStyle() {\n    return 'black';\n  }\n\n  get strokeWidth() {\n    return 0;\n  }\n\n} // class Tracer extends Actor {\n//   constructor(x = 200, y = 200, w = 40, h = 20) {\n//     super(x, y, w, h);\n//     this.onAnimate = this.onAnimate.bind(this);\n//     document.addEventListener('application-animate', this.onAnimate, false);\n//     this.friction = 0.95;\n//     this.momentum = new Vector(1,0);\n//   }\n//   onAnimate(e) {\n//     let force = this.field.solveForPosition(this.position).multiplyScalar(0.01);\n//     let app = e.detail.application;\n//     let oldPosition = this.position.clone();\n//     let draw = true;\n//     this.momentum.add(force);\n//     this.momentum.multiplyScalar(this.friction);\n//     if(this.momentum.length < 1) this.momentum.length = 1;\n//     if(this.momentum.length > 20) this.momentum.length = 20;\n//     this.position.add(this.momentum);\n//     if(this.position.x < -this.dimensions.width) {\n//       this.position.x = app.dimensions.width + this.dimensions.width;\n//       draw = false;\n//     } else if(this.position.x > app.dimensions.width + this.dimensions.width) {\n//       this.position.x = -this.dimensions.width;\n//       draw = false;\n//     }\n//     if(this.position.y < -this.dimensions.height) {\n//       this.position.y = app.dimensions.height + this.dimensions.height;\n//       draw = false;\n//     } else if(this.position.y > app.dimensions.height + this.dimensions.height) {\n//       this.position.y = -this.dimensions.height;\n//       draw = false;\n//     }\n//     if(draw) {\n//       let context = app.context;\n//       let opacity = Math.abs( (this.momentum.length - 10) / 20 );\n//       // console.log(opacity, this.momentum.length);\n//       // console.log(oldPosition, this.position);\n//       context.beginPath();\n//       context.lineWidth = this.momentum.length * 2;\n//       context.strokeStyle = 'RGBA(0,0,0,0.2)';\n//       context.moveTo(oldPosition.x, oldPosition.y);\n//       context.lineTo(this.position.x, this.position.y);\n//       context.stroke();\n//       context.beginPath();\n//       context.lineWidth = this.momentum.length;\n//       context.strokeStyle = this.colour;\n//       context.moveTo(oldPosition.x, oldPosition.y);\n//       context.lineTo(this.position.x, this.position.y);\n//       context.stroke();\n//     }\n//   }\n//   set colour(value) {\n//     this._colour = value;\n//   }\n//   get colour() {\n//     return this._colour || 'RGBA(255,255,255,0.5)';\n//   }\n// }\n// class BranchTracer extends Tracer {\n//   constructor(x = 200, y = 200, w = 40, h = 20) {\n//     super(x, y, w, h);\n//     this.originalPosition = new Vector(x, y);\n//     this.openTimer = 0.;\n//     this.dieTimer = .5;\n//     this.openRadius = 10. + Math.random() * 50.;\n//     this.startLife = Date.now();\n//     this.lifeTime = 1000 + Math.random() * 15000;\n//     this.dying = false;\n//     this.dead = false;\n//   }\n//   drawDeath(app) {\n//     let context = app.context;\n//     // if(this.dieTimer == .5) {\n//     //   context.beginPath();\n//     //   context.moveTo(this.deadPosition.x, this.deadPosition.y);\n//     //   context.fillStyle = `rgba(20,20,20,.1)`;\n//     //   context.arc(this.deadPosition.x, this.deadPosition.y, this.openRadius * 10., 0, 2 * Math.PI);\n//     //   context.fill();\n//     // }\n//     context.beginPath();\n//     context.moveTo(this.deadPosition.x, this.deadPosition.y);\n//     context.fillStyle = `rgba(20,20,20,${(1. / (this.dieTimer * 2.))})`;\n//     context.arc(this.deadPosition.x, this.deadPosition.y, (this.openRadius) / 100 * (this.dieTimer), 0, 2 * Math.PI);\n//     context.fill();\n//     this.dieTimer += (100 - this.dieTimer) * .05;\n//   }\n//   onAnimate(e) {\n//     let app = e.detail.application;\n//     let context = app.context;\n//     if(this.dying) {\n//       if(this.dieTimer < 99.) {\n//         this.drawDeath(app);\n//       } else {\n//         this.dead = true;\n//       }\n//       return;\n//     }\n//     super.onAnimate(e);\n//     if(e.detail.now - this.startLife > this.lifeTime && !this.initial) {\n//       this.dying = true;\n//       this.deadPosition = this.position;\n//     }\n//     // console.log(e.detail.now)\n//     if(this.openTimer < 100.) {\n//       context.moveTo(this.originalPosition.x, this.originalPosition.y);\n//       context.fillStyle = 'rgba(0,0,0,.1)';\n//       context.arc(this.originalPosition.x, this.originalPosition.y, this.openRadius / 100 * (this.openTimer+10), 0, 2 * Math.PI);\n//       context.fill();\n//       context.beginPath();\n//       context.fillStyle = 'rgba(255,255,255,.4)';\n//       context.arc(this.originalPosition.x, this.originalPosition.y, this.openRadius / 100 * this.openTimer, 0, 2 * Math.PI);\n//       context.fill();\n//       this.openTimer += 5.;\n//     }\n//     if(Math.random() * 100 < this.branchChance) {\n//       this.onBranch(this.position);\n//     }\n//   }\n//   set onBranch(value) {\n//     if(typeof value == 'function') this._onBranch = value.bind(this);\n//   }\n//   get onBranch() {\n//     return this._onBranch || function() { }\n//   }\n//   set branchChance(value) {\n//     if(value > 0 && value <= 100) this._branchChance = value;\n//   }\n//   get branchChance() {\n//     return this._branchChance || 0.2;\n//   }\n// }\n\n\nclass Noise {\n  constructor(r) {\n    if (r == undefined) r = Math;\n    this.grad3 = [[1, 1, 0], [-1, 1, 0], [1, -1, 0], [-1, -1, 0], [1, 0, 1], [-1, 0, 1], [1, 0, -1], [-1, 0, -1], [0, 1, 1], [0, -1, 1], [0, 1, -1], [0, -1, -1]];\n    this.p = [];\n\n    for (var i = 0; i < 256; i++) {\n      this.p[i] = Math.floor(r.random() * 256);\n    } // To remove the need for index wrapping, double the permutation table length \n\n\n    this.perm = [];\n\n    for (var i = 0; i < 512; i++) {\n      this.perm[i] = this.p[i & 255];\n    }\n  }\n\n  dot(g, x, y, z) {\n    return g[0] * x + g[1] * y + g[2] * z;\n  }\n\n  mix(a, b, t) {\n    return (1.0 - t) * a + t * b;\n  }\n\n  fade(t) {\n    return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);\n  }\n\n  noise(x, y, z) {\n    // Find unit grid cell containing point \n    var X = Math.floor(x);\n    var Y = Math.floor(y);\n    var Z = Math.floor(z); // Get relative xyz coordinates of point within that cell \n\n    x = x - X;\n    y = y - Y;\n    z = z - Z; // Wrap the integer cells at 255 (smaller integer period can be introduced here) \n\n    X = X & 255;\n    Y = Y & 255;\n    Z = Z & 255; // Calculate a set of eight hashed gradient indices \n\n    var gi000 = this.perm[X + this.perm[Y + this.perm[Z]]] % 12;\n    var gi001 = this.perm[X + this.perm[Y + this.perm[Z + 1]]] % 12;\n    var gi010 = this.perm[X + this.perm[Y + 1 + this.perm[Z]]] % 12;\n    var gi011 = this.perm[X + this.perm[Y + 1 + this.perm[Z + 1]]] % 12;\n    var gi100 = this.perm[X + 1 + this.perm[Y + this.perm[Z]]] % 12;\n    var gi101 = this.perm[X + 1 + this.perm[Y + this.perm[Z + 1]]] % 12;\n    var gi110 = this.perm[X + 1 + this.perm[Y + 1 + this.perm[Z]]] % 12;\n    var gi111 = this.perm[X + 1 + this.perm[Y + 1 + this.perm[Z + 1]]] % 12; // The gradients of each corner are now: \n    // g000 = grad3[gi000]; \n    // g001 = grad3[gi001]; \n    // g010 = grad3[gi010]; \n    // g011 = grad3[gi011]; \n    // g100 = grad3[gi100]; \n    // g101 = grad3[gi101]; \n    // g110 = grad3[gi110]; \n    // g111 = grad3[gi111]; \n    // Calculate noise contributions from each of the eight corners \n\n    var n000 = this.dot(this.grad3[gi000], x, y, z);\n    var n100 = this.dot(this.grad3[gi100], x - 1, y, z);\n    var n010 = this.dot(this.grad3[gi010], x, y - 1, z);\n    var n110 = this.dot(this.grad3[gi110], x - 1, y - 1, z);\n    var n001 = this.dot(this.grad3[gi001], x, y, z - 1);\n    var n101 = this.dot(this.grad3[gi101], x - 1, y, z - 1);\n    var n011 = this.dot(this.grad3[gi011], x, y - 1, z - 1);\n    var n111 = this.dot(this.grad3[gi111], x - 1, y - 1, z - 1); // Compute the fade curve value for each of x, y, z \n\n    var u = this.fade(x);\n    var v = this.fade(y);\n    var w = this.fade(z); // Interpolate along x the contributions from each of the corners \n\n    var nx00 = this.mix(n000, n100, u);\n    var nx01 = this.mix(n001, n101, u);\n    var nx10 = this.mix(n010, n110, u);\n    var nx11 = this.mix(n011, n111, u); // Interpolate the four results along y \n\n    var nxy0 = this.mix(nx00, nx10, v);\n    var nxy1 = this.mix(nx01, nx11, v); // Interpolate the two last results along z \n\n    var nxyz = this.mix(nxy0, nxy1, w);\n    return nxyz;\n  }\n\n}\n\nconst conversionFactor = 180 / Math.PI;\n\nlet radianToDegrees = function (radian) {\n  return radian * conversionFactor;\n};\n\nlet degreesToRadian = function (degrees) {\n  return degrees / conversionFactor;\n}; // Taken from https://github.com/wethegit/wtc-vector\n\n/**\n * A basic 2D Vector class that provides simple algebraic functionality in the form\n * of 2D Vectors.\n *\n * We use Getters/setters for both principle properties (x & y) as well as virtual\n * properties (rotation, length etc.).\n *\n * @class Vector\n * @author Liam Egan <liam@wethecollective.com>\n * @version 0.1.1\n * @created Dec 19, 2016\n */\n\n\nclass Vector {\n  /**\n   * The Vector Class constructor\n   *\n   * @constructor\n   * @param {number} x \t\t\t\tThe x coord\n   * @param {number} y \t\t\t\tThe y coord\n   */\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n  /**\n   * Resets the vector coordinates\n   *\n   * @public\n     * @param {number} x \t\t\t\tThe x coord\n     * @param {number} y \t\t\t\tThe y coord\n   */\n\n\n  reset(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n  /**\n   * Clones the vector\n   *\n   * @public\n   * @return {Vector}\t\t\t\t\tThe cloned vector\n   */\n\n\n  clone() {\n    return new Vector(this.x, this.y);\n  }\n  /**\n   * Adds one vector to another.\n   *\n   * @public\n   * @chainable\n   * @param  {Vector}  vector The vector to add to this one\n   * @return {Vector}\t\t\t\t\tReturns itself, modified\n   */\n\n\n  add(vector) {\n    this.x += vector.x;\n    this.y += vector.y;\n    return this;\n  }\n  /**\n   * Clones the vector and adds the vector to it instead\n   *\n   * @public\n   * @chainable\n   * @param  {Vector}  vector The vector to add to this one\n   * @return {Vector}\t\t\t\t\tReturns the clone of itself, modified\n   */\n\n\n  addNew(vector) {\n    let v = this.clone();\n    return v.add(vector);\n  }\n  /**\n   * Adds a scalar to the vector, modifying both the x and y\n   *\n   * @public\n   * @chainable\n   * @param  {number}  scalar The scalar to add to the vector\n   * @return {Vector}\t\t\t\t\tReturns itself, modified\n   */\n\n\n  addScalar(scalar) {\n    return this.add(new Vector(scalar, scalar));\n  }\n  /**\n   * Clones the vector and adds the scalar to it instead\n   *\n   * @public\n   * @chainable\n   * @param  {number}  scalar The scalar to add to the vector\n   * @return {Vector}\t\t\t\t\tReturns the clone of itself, modified\n   */\n\n\n  addScalarNew(scalar) {\n    let v = this.clone();\n    return v.addScalar(scalar);\n  }\n  /**\n   * Subtracts one vector from another.\n   *\n   * @public\n   * @chainable\n   * @param  {Vector}  vector The vector to subtract from this one\n   * @return {Vector}\t\t\t\t\tReturns itself, modified\n   */\n\n\n  subtract(vector) {\n    this.x -= vector.x;\n    this.y -= vector.y;\n    return this;\n  }\n  /**\n   * Clones the vector and subtracts the vector from it instead\n   *\n   * @public\n   * @chainable\n   * @param  {Vector}  vector The vector to subtract from this one\n   * @return {Vector}\t\t\t\t\tReturns the clone of itself, modified\n   */\n\n\n  subtractNew(vector) {\n    let v = this.clone();\n    return v.subtract(vector);\n  }\n  /**\n   * Subtracts a scalar from the vector, modifying both the x and y\n   *\n   * @public\n   * @chainable\n   * @param  {number}  scalar The scalar to subtract from the vector\n   * @return {Vector}\t\t\t\t\tReturns itself, modified\n   */\n\n\n  subtractScalar(scalar) {\n    return this.subtract(new Vector(scalar, scalar));\n  }\n  /**\n   * Clones the vector and subtracts the scalar from it instead\n   *\n   * @public\n   * @chainable\n   * @param  {number}  scalar The scalar to add to the vector\n   * @return {Vector}\t\t\t\t\tReturns the clone of itself, modified\n   */\n\n\n  subtractScalarNew(scalar) {\n    let v = this.clone();\n    return v.subtractScalar(scalar);\n  }\n  /**\n   * Divides one vector by another.\n   *\n   * @public\n   * @chainable\n   * @param  {Vector}  vector The vector to divide this by\n   * @return {Vector}\t\t\t\t\tReturns itself, modified\n   */\n\n\n  divide(vector) {\n    if (vector.x !== 0) {\n      this.x /= vector.x;\n    } else {\n      this.x = 0;\n    }\n\n    if (vector.y !== 0) {\n      this.y /= vector.y;\n    } else {\n      this.y = 0;\n    }\n\n    return this;\n  }\n  /**\n   * Clones the vector and divides it by the vector instead\n   *\n   * @public\n   * @chainable\n   * @param  {Vector}  vector The vector to divide the clone by\n   * @return {Vector}\t\t\t\t\tReturns the clone of itself, modified\n   */\n\n\n  divideNew(vector) {\n    let v = this.clone();\n    return v.divide(vector);\n  }\n  /**\n   * Divides the vector by a scalar.\n   *\n   * @public\n   * @chainable\n   * @param  {number}  scalar The scalar to divide both x and y by\n   * @return {Vector}\t\t\t\t\tReturns itself, modified\n   */\n\n\n  divideScalar(scalar) {\n    var v = new Vector(scalar, scalar);\n    return this.divide(v);\n  }\n  /**\n   * Clones the vector and divides it by the provided scalar.\n   *\n   * @public\n   * @chainable\n   * @param  {number}  scalar The scalar to divide both x and y by\n   * @return {Vector}\t\t\t\t\tReturns the clone of itself, modified\n   */\n\n\n  divideScalarNew(scalar) {\n    let v = this.clone();\n    return v.divideScalar(scalar);\n  }\n  /**\n   * Multiplies one vector by another.\n   *\n   * @public\n   * @chainable\n   * @param  {Vector}  vector The vector to multiply this by\n   * @return {Vector}\t\t\t\t\tReturns itself, modified\n   */\n\n\n  multiply(vector) {\n    this.x *= vector.x;\n    this.y *= vector.y;\n    return this;\n  }\n  /**\n   * Clones the vector and multiplies it by the vector instead\n   *\n   * @public\n   * @chainable\n   * @param  {Vector}  vector The vector to multiply the clone by\n   * @return {Vector}\t\t\t\t\tReturns the clone of itself, modified\n   */\n\n\n  multiplyNew(vector) {\n    let v = this.clone();\n    return v.multiply(vector);\n  }\n  /**\n   * Multiplies the vector by a scalar.\n   *\n   * @public\n   * @chainable\n   * @param  {number}  scalar The scalar to multiply both x and y by\n   * @return {Vector}\t\t\t\t\tReturns itself, modified\n   */\n\n\n  multiplyScalar(scalar) {\n    var v = new Vector(scalar, scalar);\n    return this.multiply(v);\n  }\n  /**\n   * Clones the vector and multiplies it by the provided scalar.\n   *\n   * @public\n   * @chainable\n   * @param  {number}  scalar The scalar to multiply both x and y by\n   * @return {Vector}\t\t\t\t\tReturns the clone of itself, modified\n   */\n\n\n  multiplyScalarNew(scalar) {\n    let v = this.clone();\n    return v.multiplyScalar(scalar);\n  }\n  /**\n   * Alias of {@link Vector#multiplyScalar__anchor multiplyScalar}\n   */\n\n\n  scale(scalar) {\n    return this.multiplyScalar(scalar);\n  }\n  /**\n   * Alias of {@link Vector#multiplyScalarNew__anchor multiplyScalarNew}\n   */\n\n\n  scaleNew(scalar) {\n    return this.multiplyScalarNew(scalar);\n  }\n  /**\n   * Rotates a vecor by a given amount, provided in radians.\n   *\n   * @public\n   * @chainable\n   * @param  {number}  radian The angle, in radians, to rotate the vector by\n   * @return {Vector}\t\t\t\t\tReturns itself, modified\n   */\n\n\n  rotate(radian) {\n    var x = this.x * Math.cos(radian) - this.y * Math.sin(radian);\n    var y = this.x * Math.sin(radian) + this.y * Math.cos(radian);\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n  /**\n   * Clones the vector and rotates it by the supplied radian value\n   *\n   * @public\n   * @chainable\n   * @param  {number}  radian The angle, in radians, to rotate the vector by\n   * @return {Vector}\t\t\t\t\tReturns the clone of itself, modified\n   */\n\n\n  rotateNew(radian) {\n    let v = this.clone();\n    return v.rotate(radian);\n  }\n  /**\n   * Rotates a vecor by a given amount, provided in degrees. Converts the degree\n   * value to radians and runs the rotaet method.\n   *\n   * @public\n   * @chainable\n   * @param  {number}  degrees The angle, in degrees, to rotate the vector by\n   * @return {Vector}\t\t\t\t\t\tReturns itself, modified\n   */\n\n\n  rotateDeg(degrees) {\n    return this.rotate(degreesToRadian(degrees));\n  }\n  /**\n   * Clones the vector and rotates it by the supplied degree value\n   *\n   * @public\n   * @chainable\n     * @param  {number}  degrees The angle, in degrees, to rotate the vector by\n   * @return {Vector}\t\t\t\t\t Returns the clone of itself, modified\n   */\n\n\n  rotateDegNew(degrees) {\n    return this.rotateNew(degreesToRadian(degrees));\n  }\n  /**\n   * Alias of {@link Vector#rotate__anchor rotate}\n   */\n\n\n  rotateBy(radian) {\n    return this.rotate(radian);\n  }\n  /**\n   * Alias of {@link Vector#rotateNew__anchor rotateNew}\n   */\n\n\n  rotateByNew(radian) {\n    return this.rotateNew(radian);\n  }\n  /**\n   * Alias of {@link Vector#rotateDeg__anchor rotateDeg}\n   */\n\n\n  rotateDegBy(degrees) {\n    return this.rotateDeg(degrees);\n  }\n  /**\n   * Alias of {@link Vector#rotateDegNew__anchor rotateDegNew}\n   */\n\n\n  rotateDegByNew(radian) {\n    return tjos.rotateDegNew(radian);\n  }\n  /**\n   * Rotates a vector to a specific angle\n   *\n   * @public\n   * @chainable\n   * @param  {number}  radian The angle, in radians, to rotate the vector to\n   * @return {Vector}\t\t\t\t\tReturns itself, modified\n   */\n\n\n  rotateTo(radian) {\n    return this.rotate(radian - this.angle);\n  }\n\n  /**\n   * Clones the vector and rotates it to the supplied radian value\n   *\n   * @public\n   * @chainable\n   * @param  {number}  radian The angle, in radians, to rotate the vector to\n   * @return {Vector}\t\t\t\t\tReturns the clone of itself, modified\n   */\n  rotateToNew(radian) {\n    let v = this.clone();\n    return v.rotateTo(radian);\n  }\n\n  /**\n   * Rotates a vecor to a given amount, provided in degrees. Converts the degree\n   * value to radians and runs the rotateTo method.\n   *\n   * @public\n   * @chainable\n   * @param  {number}  degrees The angle, in degrees, to rotate the vector to\n   * @return {Vector}\t\t\t\t\t\tReturns itself, modified\n   */\n  rotateToDeg(degrees) {\n    return this.rotateTo(degreesToRadian(degrees));\n  }\n  /**\n   * Clones the vector and rotates it to the supplied degree value\n   *\n   * @public\n   * @chainable\n     * @param  {number}  degrees The angle, in degrees, to rotate the vector to\n   * @return {Vector}\t\t\t\t\t Returns the clone of itself, modified\n   */\n\n\n  rotateToDegNew(degrees) {\n    return this.rotateToNew(degreesToRadian(degrees));\n  }\n  /**\n   * Normalises the vector down to a length of 1 unit\n   *\n   * @public\n   * @chainable\n   * @return {Vector}\t\t\t\t\tReturns itself, modified\n   */\n\n\n  normalise() {\n    return this.divideScalar(this.length);\n  }\n  /**\n   * Clones the vector and normalises it\n   *\n   * @public\n   * @chainable\n   * @return {Vector}\t\t\t\t\tReturns a clone of itself, modified\n   */\n\n\n  normaliseNew() {\n    return this.divideScalarNew(this.length);\n  }\n  /**\n   * Calculates the distance between this and the supplied vector\n   *\n   * @param  {Vector} vector The vector to calculate the distance from\n   * @return {number}        The distance between this and the supplied vector\n   */\n\n\n  distance(vector) {\n    return this.subtractNew(vector).length;\n  }\n  /**\n   * Calculates the distance on the X axis between this and the supplied vector\n   *\n   * @param  {Vector} vector The vector to calculate the distance from\n   * @return {number}        The distance, along the x axis, between this and the supplied vector\n   */\n\n\n  distanceX(vector) {\n    return this.x - vector.x;\n  }\n  /**\n   * Calculated the distance on the Y axis between this and the supplied vector\n   *\n   * @param  {Vector} vector The vector to calculate the distance from\n   * @return {number}        The distance, along the y axis, between this and the supplied vector\n   */\n\n\n  distanceY(vector) {\n    return this.y - vector.y;\n  }\n  /**\n   * Calculates the dot product between this and a supplied vector\n   *\n   * @example\n   * // returns -14\n   * new Vector(2, -3).dot(new Vector(-4, 2))\n   * new Vector(-4, 2).dot(new Vector(2, -3))\n   * new Vector(2, -4).dot(new Vector(-3, 2))\n   *\n   * @param  {Vector} vector The vector object against which to calculate the dot product\n   * @return {number}        The dot product of the two vectors\n   */\n\n\n  dot(vector) {\n    return this.x * vector.x + this.y * vector.y;\n  }\n  /**\n   * Calculates the cross product between this and the supplied vector.\n   *\n   * @example\n   * // returns -2\n   * new Vector(2, -3).cross(new Vector(-4, 2))\n   * new Vector(-4, 2).cross(new Vector(2, -3))\n   * // returns 2\n   * new Vector(2, -4).cross(new Vector(-3, 2))\n   *\n   * @param  {Vector} vector The vector object against which to calculate the cross product\n   * @return {number}        The cross product of the two vectors\n   */\n\n\n  cross(vector) {\n    return this.x * vector.x - this.y * vector.y;\n  }\n  /**\n   * Getters and setters\n   */\n\n  /**\n   * (getter/setter) The x value of the vector.\n   *\n   * @type {number}\n   * @default 0\n   */\n\n\n  set x(x) {\n    if (typeof x == 'number') {\n      this._x = x;\n    } else {\n      throw new TypeError('X should be a number');\n    }\n  }\n\n  get x() {\n    return this._x || 0;\n  }\n  /**\n     * (getter/setter) The y value of the vector.\n     *\n     * @type {number}\n     * @default 0\n     */\n\n\n  set y(y) {\n    if (typeof y == 'number') {\n      this._y = y;\n    } else {\n      throw new TypeError('Y should be a number');\n    }\n  }\n\n  get y() {\n    return this._y || 0;\n  }\n  /**\n  * (getter/setter) The length of the vector presented as a square. If you're using\n  * length for comparison, this is quicker.\n  *\n  * @type {number}\n  * @default 0\n  */\n\n\n  set lengthSquared(length) {\n    var factor;\n\n    if (typeof length == 'number') {\n      factor = length / this.lengthSquared;\n      this.multiplyScalar(factor);\n    } else {\n      throw new TypeError('length should be a number');\n    }\n  }\n\n  get lengthSquared() {\n    return this.x * this.x + this.y * this.y;\n  }\n  /**\n  * (getter/setter) The length of the vector\n  *\n  * @type {number}\n  * @default 0\n  */\n\n\n  set length(length) {\n    var factor;\n\n    if (typeof length == 'number') {\n      factor = length / this.length;\n      this.multiplyScalar(factor);\n    } else {\n      throw new TypeError('length should be a number');\n    }\n  }\n\n  get length() {\n    return Math.sqrt(this.lengthSquared);\n  }\n  /**\n  * (getter/setter) The angle of the vector, in radians\n  *\n  * @type {number}\n  * @default 0\n  */\n\n\n  set angle(radian) {\n    if (typeof radian == 'number') {\n      this.rotateTo(radian);\n    } else {\n      throw new TypeError('angle should be a number');\n    }\n  }\n\n  get angle() {\n    return Math.atan2(this.y, this.x);\n  }\n  /**\n  * (getter/setter) The angle of the vector, in radians\n  *\n  * @type {number}\n  * @default 0\n  */\n\n\n  set angleInDegrees(degrees) {\n    if (typeof degrees == 'number') {\n      this.rotateToDeg(degrees);\n    } else {\n      throw new TypeError('angle should be a number');\n    }\n  }\n\n  get angleInDegrees() {\n    return radianToDegrees(Math.atan2(this.y, this.x));\n  }\n  /**\n   * (getter/setter) Vector width.\n  * Alias of {@link Vector#x x}\n   *\n   * @type {number}\n   */\n\n\n  set width(w) {\n    this.x = w;\n  }\n\n  get width() {\n    return this.x;\n  }\n  /**\n   * (getter/setter) Vector height.\n  * Alias of {@link Vector#x x}\n   *\n   * @type {number}\n   */\n\n\n  set height(h) {\n    this.y = h;\n  }\n\n  get height() {\n    return this.y;\n  }\n  /**\n   * (getter/setter) Vector area.\n   * @readonly\n   *\n   * @type {number}\n   */\n\n\n  get area() {\n    return this.x * this.y;\n  }\n\n}\n\ninitialise();\nserviceWorker.unregister();","map":{"version":3,"sources":["/Users/veraweikel/src/sandbox/legacy/src/index.js"],"names":["React","ReactDOM","App","serviceWorker","render","document","getElementById","initialise","application","Application","fadeColour","fillColour","onResize","vfield","VectorField","scale","amplitude","addActor","maxNum","num","addTracer","position","colour","tracer","BranchTracer","x","y","field","momentum","Vector","Math","random","length","friction","round","actors","seed","window","innerWidth","innerHeight","initial","branchChance","onBranch","setInterval","z","stage","body","appendChild","onPointerMove","clientX","clientY","animating","constructor","createElement","animate","bind","onPointerDown","onPointerup","initialiseEvents","addEventListener","deInitialiseEvents","removeEventListener","actor","Actor","push","runFor","ticks","interval","i","triggerEvent","now","then","delta","Date","removalTest","dead","splice","requestAnimationFrame","dims","dimensions","animatingOut","opacity","context","fillStyle","fillRect","width","height","clearOnRedraw","CLEAR","clearRect","FADE","forEach","e","pointer","event","data","CustomEvent","detail","createEvent","initCustomEvent","dispatchEvent","_actors","scaleFactor","value","_scaleFactor","_dimensions","HTMLCanvasElement","className","_stage","getContext","isNaN","_now","_then","_animating","_fadeColour","_fillColour","NOCLEAR","indexOf","_clearOnRedraw","w","h","_position","noise","Noise","helpers","mousepos","helper","preDraw","postDraw","solveForPosition","v","clone","amp","envelope","noise1","transV","angle","vector","debug","destroy","sampleWidth","curpos","Arrow","_scale","_amplitude","_sampleWidth","_z","_mousepos","_debug","strokeStyle","strokeWidth","r","undefined","grad3","p","floor","perm","dot","g","mix","a","b","t","fade","X","Y","Z","gi000","gi001","gi010","gi011","gi100","gi101","gi110","gi111","n000","n100","n010","n110","n001","n101","n011","n111","u","nx00","nx01","nx10","nx11","nxy0","nxy1","nxyz","conversionFactor","PI","radianToDegrees","radian","degreesToRadian","degrees","reset","add","addNew","addScalar","scalar","addScalarNew","subtract","subtractNew","subtractScalar","subtractScalarNew","divide","divideNew","divideScalar","divideScalarNew","multiply","multiplyNew","multiplyScalar","multiplyScalarNew","scaleNew","rotate","cos","sin","rotateNew","rotateDeg","rotateDegNew","rotateBy","rotateByNew","rotateDegBy","rotateDegByNew","tjos","rotateTo","rotateToNew","rotateToDeg","rotateToDegNew","normalise","normaliseNew","distance","distanceX","distanceY","cross","_x","TypeError","_y","lengthSquared","factor","sqrt","atan2","angleInDegrees","area","unregister"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// Liam Egan\n// 2019\n\nlet initialise = function() {\n    let application = new Application();\n    // application.scaleFactor = 2;\n    // application.clearOnRedraw = Application.FADE;\n    application.fadeColour = 'rgba(0,0,0,.12)';\n    application.fillColour = 'rgba(30,30,30,1)';\n    application.onResize();\n    let vfield = new VectorField();\n    vfield.scale = 800;\n    vfield.amplitude = 10;\n    // vfield.debug = true;\n    \n    application.addActor(vfield);\n    \n    let maxNum = 100;\n    let num = 0;\n    \n    let addTracer = (position, colour)=> {\n      if(num > maxNum) return;\n      \n      let tracer = new BranchTracer(position.x, position.y);\n      tracer.field = vfield;\n      let momentum = new Vector(Math.random(), Math.random());\n      momentum.length = Math.random() * 2;\n      tracer.momentum = momentum;\n      tracer.friction = 0.97;\n      \n      if(colour) {\n        tracer.colour = colour;\n      } else {\n        tracer.colour = 'RGBA('+ 100 + Math.round(Math.random() * 155) +','+ 100 + Math.round(Math.random() * 155) +',255,0.5)';  \n      }\n      \n      application.addActor(tracer);\n      \n      num = application.actors.length;\n      \n      return tracer;\n    }\n    let seed = addTracer(new Vector(window.innerWidth / 2, window.innerHeight / 2), 'RGBA(255, 100, 100, 0.5)');\n    seed.initial = true;\n    seed.branchChance = 5;\n    seed.friction = 0.985;\n    seed.onBranch = addTracer;\n    \n    setInterval(()=> {\n      vfield.z = Math.random() * 10000;\n    }, 10000)\n    \n    \n    let stage = application.stage;\n    document.body.appendChild(stage);\n    application.onPointerMove({ clientX: window.innerWidth / 2, clientY: window.innerHeight / 2 });\n    application.render();\n    application.animating = true;\n    \n    // application.runFor(60 * 120);\n    \n    return;\n  }\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  class Application {\n    constructor() {\n      this.stage = document.createElement('canvas');\n      \n      this.animate = this.animate.bind(this);\n      \n      this.onResize = this.onResize.bind(this);\n      this.onPointerDown = this.onPointerDown.bind(this);\n      this.onPointerup = this.onPointerup.bind(this);\n      this.onPointerMove = this.onPointerMove.bind(this);\n      \n      this.initialiseEvents();\n    }\n    \n    initialiseEvents() {\n      window.addEventListener('resize', this.onResize, false);\n      document.addEventListener('pointerdown', this.onPointerDown, false);\n      document.addEventListener('pointerup', this.onPointerup, false);\n      document.addEventListener('pointermove', this.onPointerMove, false);\n    }\n    \n    deInitialiseEvents() {\n      window.removeEventListener('resize', this.onResize, false);\n      document.removeEventListener('pointerdown', this.onPointerDown, false);\n      document.removeEventListener('pointerup', this.onPointerup, false);\n      document.removeEventListener('pointermove', this.onPointerMove, false);\n    }\n    \n    addActor(actor) {\n      if(actor instanceof Actor) {\n        this.actors.push(actor);\n      }\n    }\n    \n    runFor(ticks) {\n      let interval = 1 / 60;\n      let i = 0;\n      \n      for(i; i < ticks; i++) {\n        this.triggerEvent('application-animate', { now: this.now, then: this.then, interval: interval, application: this });\n  \n        this.render();  \n      }\n      \n    }\n    \n    animate(delta) {\n      this.now = Date.now();\n      let interval = this.now - this.then;\n      \n      this.triggerEvent('application-animate', { now: this.now, then: this.then, interval: interval, application: this });\n      \n      this.render(delta);\n      \n      this.then = this.now;\n      \n      // remove dead actors\n      if(delta - this.removalTest > 5000 || !this.removalTest) {\n        this.removalTest = delta\n        for(let i = this.actors.length-1; i >= 0; i--) {\n          if(this.actors[i].dead === true) {\n            this.actors.splice(i, 1);\n          }\n        }\n      }\n      \n      if(this.animating) {\n        requestAnimationFrame(this.animate);\n      }\n    }\n    \n    render(delta) {\n      let dims = this.dimensions;\n      \n      if(this.animatingOut) {\n        this.opacity += .02;\n        if(this.opacity >= 1) this.animatingOut = false;\n        this.context.fillStyle = `rgba(10,10,10,${this.opacity}`;\n        this.context.fillRect(0,0, dims.width, dims.height);\n      }\n      \n      if(this.clearOnRedraw == Application.CLEAR) {\n        this.context.clearRect(0, 0, dims.width, dims.height);\n      } else if(this.clearOnRedraw == Application.FADE) {\n        this.context.fillStyle = this.fadeColour;\n        this.context.fillRect(0,0, dims.width, dims.height);\n      }\n      \n      this.actors.forEach((actor)=> {\n        actor.render(this);\n      });\n    }\n    \n    onResize(e) {\n      this.dimensions = new Vector(window.innerWidth*2, window.innerHeight*2);\n    }\n    onPointerDown(e) {\n      \n    }\n    onPointerup(e) {\n      \n    }\n    onPointerMove(e) {\n      let pointer = new Vector(e.clientX, e.clientY);\n      this.triggerEvent('application-pointermove', { pointer: pointer });\n    }\n    \n    triggerEvent(event, data) {\n      if (window.CustomEvent) {\n        var event = new CustomEvent(event, {detail: data});\n      } else {\n        var event = document.createEvent('CustomEvent');\n        event.initCustomEvent(event, true, true, data);\n      }\n  \n      document.dispatchEvent(event);\n    }\n    \n    get actors() {\n      if( !this._actors ) this._actors = [];\n      \n      return this._actors;\n    }\n    \n    set scaleFactor(value) {\n      if(value >= 1) {\n        this._scaleFactor = value;\n        this.onResize();\n      }\n    }\n    get scaleFactor() {\n      return this._scaleFactor || 1;\n    }\n    \n    set dimensions(value) {\n      if( value instanceof Vector ) {\n        value.scale(this.scaleFactor)\n        this.stage.width = value.width;\n        this.stage.height = value.height;\n        this.context.fillStyle = this.fillColour;\n        this.context.fillRect(0,0, this.dimensions.width, this.dimensions.height);\n        this._dimensions = value;\n      }\n    }\n    get dimensions() {\n      return this._dimensions || new Vector(0,0)\n    }\n    \n    set stage(value) {\n      if(value instanceof HTMLCanvasElement) {\n        value.className = this.className;\n        this._stage = value;\n        this.context = this.stage.getContext('2d');\n        this.context.fillStyle = this.fillColour;\n        this.context.fillRect(0,0, this.dimensions.width, this.dimensions.height);\n        this.onResize();\n      }\n    }\n    get stage() {\n      return this._stage || null;\n    }\n    \n    set now(value) {\n      if(!isNaN(value)) this._now = value\n    }\n    get now() {\n      return this._now || 0;\n    }\n    \n    set then(value) {\n      if(!isNaN(value)) this._then = value\n    }\n    get then() {\n      return this._then || 0;\n    }\n    \n    set animating(value) {\n      if(value === true && this.animating !== true) {\n        this._animating = true;\n        \n        this.now = Date.now();\n        this.then = this.now;  \n        \n        requestAnimationFrame(this.animate);\n      }\n    }\n    get animating() {\n      return this._animating === true;\n    }\n    \n    set fadeColour(value) {\n      this._fadeColour = value;\n    }\n    get fadeColour() {\n      return this._fadeColour || 'rgba(255,255,255,.5)';\n    }\n    \n    set fillColour(value) {\n      this._fillColour = value;\n    }\n    get fillColour() {\n      return this._fillColour || 'rgba(255,255,255,1)';\n    }\n    \n    set clearOnRedraw(value) {\n      if([Application.NOCLEAR, Application.CLEAR, Application.FADE].indexOf(value) > -1 ) {\n        this._clearOnRedraw = value;\n      }\n    }\n    get clearOnRedraw() {\n      return this._clearOnRedraw || Application.NOCLEAR;\n    }\n    \n    get className() {\n      return 'drawer';\n    }\n  }\n  \n  Application.NOCLEAR = 0;\n  Application.CLEAR = 1;\n  Application.FADE = 2;\n  \n  class Actor {\n    constructor(x, y, w, h) {\n      this.dimensions = new Vector(w, h);\n      this.position = new Vector(x, y);\n    }\n    \n    render() {\n      \n    }\n    \n    set dimensions(value) {\n      if(value instanceof Vector) this._dimensions = value;\n    }\n    get dimensions() {\n      return this._dimensions || new Vector(0,0);\n    }\n    \n    set position(value) {\n      if(value instanceof Vector) this._position = value;\n    }\n    get position() {\n      return this._position || new Vector(0,0);\n    }\n  }\n  \n  class VectorField extends Actor {\n    constructor(x = 0, y = 0, w = 0, h = 0) {\n      super(x, y, w, h);\n      \n      this.noise = new Noise();\n      \n      this.helpers = [];\n      \n      this.mousepos = new Vector(0, 0);\n      \n      this.onResize = this.onResize.bind(this);\n      this.onPointerMove = this.onPointerMove.bind(this);\n      \n      // document.addEventListener('application-pointermove', this.onPointerMove, false);\n      window.addEventListener('resize', this.onResize);\n      this.onResize();\n    }\n    \n    render(application) {\n      this.helpers.forEach((helper)=> {\n        helper.render(application);\n      })\n    }\n    \n    preDraw() {}\n    postDraw() {}\n    \n    solveForPosition(v) {\n      if(!v instanceof Vector) return\n      \n      v = v.clone();\n      v.x -= window.innerWidth / 2;\n      v.y -= window.innerHeight / 2;\n      \n      let scale = this.scale;\n      let amp = this.amplitude;\n      \n  //     let waveform = new Vector(Math.cos(v.x / scale) * amp, Math.sin(v.y / scale) * amp);\n  //     return new Vector(waveform.y - waveform.x, -waveform.x - waveform.y);\n      \n      let envelope = this.amplitude;\n      \n      let noise = this.noise.noise(v.x / scale, v.y / scale, this.z) * scale;\n      if(noise > envelope) noise = envelope;\n      if(noise < -envelope) noise = -envelope;\n      let noise1 = this.noise.noise(v.y / scale, v.x / scale, this.z / scale);\n      let transV = new Vector(1, 0);\n      transV.length = noise;\n      transV.angle = noise1 * 10;\n      return transV;\n          \n      // let transv = v.subtractNew(this.mousepos);\n      // transv = new Vector(transv.y - transv.x, -transv.x - transv.y);\n      \n      // transv.length *= 0.03;\n      // if(transv.length > 50) {\n      //   transv.length = 50;\n      // }\n      // transv.length -= 50;\n      // transv.length *= -1;\n      \n      // return transv;\n    }\n    \n    onPointerMove(e) {\n      this.mousepos = e.detail.pointer;\n      \n      this.helpers.forEach((helper)=> {\n        helper.vector = this.solveForPosition(helper.position);\n      });\n    }\n    \n    onResize(e) {\n      if(!this.debug) return;\n      \n      this.helpers.forEach((helper)=> {\n        helper.destroy();\n      })\n      this.helpers = [];\n      \n      let w = this.sampleWidth;\n      let curpos = new Vector(0, 0);\n      \n      while(curpos.y < window.innerHeight + w) {\n        curpos.x = 0;\n        while(curpos.x < window.innerWidth + w) {\n          this.helpers.push(new Arrow(curpos.x, curpos.y, 10, 10, this.solveForPosition(curpos)))\n          curpos.x += w;\n        }\n        curpos.y += w;\n      }\n    }\n    \n    set scale(value) {\n      if(value > 0) {\n        this._scale = value;\n      }\n    }\n    get scale() {\n      return this._scale || 500;\n    }\n    \n    set amplitude(value) {\n      if(value > 0) {\n        this._amplitude = value;\n      }\n    }\n    get amplitude() {\n      return this._amplitude || 10;\n    }\n    \n    set sampleWidth(value) {\n      if(value > 0) this._sampleWidth = value;\n    }\n    get sampleWidth() {\n      return this._sampleWidth || 30;\n    }\n    \n    set z(value) {\n      if(value > 0) this._z = value;\n    }\n    get z() {\n      return this._z || 30;\n    }\n    \n    set mousepos(value) {\n      if(value instanceof Vector) this._mousepos = value;\n    }\n    get mousepos() {\n      return this._mousepos || new Vector(0,0);\n    }\n    \n    set debug(value) {\n      this._debug = value === true;\n    }\n    get debug() {\n      return this._debug === true;\n    }\n    \n    get strokeStyle() {\n      return 'black';\n    }\n    \n    get strokeWidth() {\n      return 0;\n    }\n  }\n  \n  // class Tracer extends Actor {\n  //   constructor(x = 200, y = 200, w = 40, h = 20) {\n  //     super(x, y, w, h);\n      \n  //     this.onAnimate = this.onAnimate.bind(this);\n      \n  //     document.addEventListener('application-animate', this.onAnimate, false);\n                                \n  //     this.friction = 0.95;\n  //     this.momentum = new Vector(1,0);\n  //   }\n    \n  //   onAnimate(e) {\n  //     let force = this.field.solveForPosition(this.position).multiplyScalar(0.01);\n  //     let app = e.detail.application;\n  //     let oldPosition = this.position.clone();\n  //     let draw = true;\n      \n  //     this.momentum.add(force);\n  //     this.momentum.multiplyScalar(this.friction);\n  //     if(this.momentum.length < 1) this.momentum.length = 1;\n  //     if(this.momentum.length > 20) this.momentum.length = 20;\n  //     this.position.add(this.momentum);\n  \n  //     if(this.position.x < -this.dimensions.width) {\n  //       this.position.x = app.dimensions.width + this.dimensions.width;\n  //       draw = false;\n  //     } else if(this.position.x > app.dimensions.width + this.dimensions.width) {\n  //       this.position.x = -this.dimensions.width;\n  //       draw = false;\n  //     }\n  //     if(this.position.y < -this.dimensions.height) {\n  //       this.position.y = app.dimensions.height + this.dimensions.height;\n  //       draw = false;\n  //     } else if(this.position.y > app.dimensions.height + this.dimensions.height) {\n  //       this.position.y = -this.dimensions.height;\n  //       draw = false;\n  //     }\n      \n  //     if(draw) {\n  //       let context = app.context;\n  //       let opacity = Math.abs( (this.momentum.length - 10) / 20 );\n  //       // console.log(opacity, this.momentum.length);\n  //       // console.log(oldPosition, this.position);\n        \n  //       context.beginPath();\n  //       context.lineWidth = this.momentum.length * 2;\n  //       context.strokeStyle = 'RGBA(0,0,0,0.2)';\n  //       context.moveTo(oldPosition.x, oldPosition.y);\n  //       context.lineTo(this.position.x, this.position.y);\n  //       context.stroke();\n        \n  //       context.beginPath();\n  //       context.lineWidth = this.momentum.length;\n  //       context.strokeStyle = this.colour;\n  //       context.moveTo(oldPosition.x, oldPosition.y);\n  //       context.lineTo(this.position.x, this.position.y);\n  //       context.stroke();\n  //     }\n      \n  //   }\n    \n  //   set colour(value) {\n  //     this._colour = value;\n  //   }\n  //   get colour() {\n  //     return this._colour || 'RGBA(255,255,255,0.5)';\n  //   }\n  // }\n  \n  \n  // class BranchTracer extends Tracer {\n  //   constructor(x = 200, y = 200, w = 40, h = 20) {\n  //     super(x, y, w, h);\n  //     this.originalPosition = new Vector(x, y);\n  //     this.openTimer = 0.;\n  //     this.dieTimer = .5;\n  //     this.openRadius = 10. + Math.random() * 50.;\n  //     this.startLife = Date.now();\n  //     this.lifeTime = 1000 + Math.random() * 15000;\n  //     this.dying = false;\n  //     this.dead = false;\n  //   }\n    \n  //   drawDeath(app) {\n  //     let context = app.context;\n  //     // if(this.dieTimer == .5) {\n  //     //   context.beginPath();\n  //     //   context.moveTo(this.deadPosition.x, this.deadPosition.y);\n  //     //   context.fillStyle = `rgba(20,20,20,.1)`;\n  //     //   context.arc(this.deadPosition.x, this.deadPosition.y, this.openRadius * 10., 0, 2 * Math.PI);\n  //     //   context.fill();\n  //     // }\n  //     context.beginPath();\n  //     context.moveTo(this.deadPosition.x, this.deadPosition.y);\n  //     context.fillStyle = `rgba(20,20,20,${(1. / (this.dieTimer * 2.))})`;\n  //     context.arc(this.deadPosition.x, this.deadPosition.y, (this.openRadius) / 100 * (this.dieTimer), 0, 2 * Math.PI);\n  //     context.fill();\n  //     this.dieTimer += (100 - this.dieTimer) * .05;\n  //   }\n    \n  //   onAnimate(e) {\n  //     let app = e.detail.application;\n  //     let context = app.context;\n      \n  //     if(this.dying) {\n  //       if(this.dieTimer < 99.) {\n  //         this.drawDeath(app);\n  //       } else {\n  //         this.dead = true;\n  //       }\n  //       return;\n  //     }\n      \n  //     super.onAnimate(e);\n      \n  //     if(e.detail.now - this.startLife > this.lifeTime && !this.initial) {\n  //       this.dying = true;\n  //       this.deadPosition = this.position;\n  //     }\n      \n  //     // console.log(e.detail.now)\n      \n  //     if(this.openTimer < 100.) {\n  //       context.moveTo(this.originalPosition.x, this.originalPosition.y);\n  //       context.fillStyle = 'rgba(0,0,0,.1)';\n  //       context.arc(this.originalPosition.x, this.originalPosition.y, this.openRadius / 100 * (this.openTimer+10), 0, 2 * Math.PI);\n  //       context.fill();\n  //       context.beginPath();\n  //       context.fillStyle = 'rgba(255,255,255,.4)';\n  //       context.arc(this.originalPosition.x, this.originalPosition.y, this.openRadius / 100 * this.openTimer, 0, 2 * Math.PI);\n  //       context.fill();\n  //       this.openTimer += 5.;\n  //     }\n      \n  //     if(Math.random() * 100 < this.branchChance) {\n  //       this.onBranch(this.position);\n  //     }\n  //   }\n    \n  //   set onBranch(value) {\n  //     if(typeof value == 'function') this._onBranch = value.bind(this);\n  //   }\n  //   get onBranch() {\n  //     return this._onBranch || function() { }\n  //   }\n    \n  //   set branchChance(value) {\n  //     if(value > 0 && value <= 100) this._branchChance = value;\n  //   }\n  //   get branchChance() {\n  //     return this._branchChance || 0.2;\n  //   }\n  // }\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  class Noise {\n    constructor(r) {\n      if (r == undefined) r = Math;\n      this.grad3 = [[1,1,0],[-1,1,0],[1,-1,0],[-1,-1,0], \n                                     [1,0,1],[-1,0,1],[1,0,-1],[-1,0,-1], \n                                     [0,1,1],[0,-1,1],[0,1,-1],[0,-1,-1]]; \n      this.p = [];\n      for (var i=0; i<256; i++) {\n        this.p[i] = Math.floor(r.random()*256);\n      }\n      // To remove the need for index wrapping, double the permutation table length \n      this.perm = []; \n      for(var i=0; i<512; i++) {\n        this.perm[i]=this.p[i & 255];\n      }\n    }\n    \n    dot(g, x, y, z) {\n      return g[0]*x + g[1]*y + g[2]*z; \n    }\n    \n    mix(a, b, t) {\n      return (1.0-t)*a + t*b; \n    }\n    \n    fade(t) {\n      return t*t*t*(t*(t*6.0-15.0)+10.0); \n    }\n    \n    noise(x, y, z) {\n      // Find unit grid cell containing point \n      var X = Math.floor(x); \n      var Y = Math.floor(y); \n      var Z = Math.floor(z); \n  \n      // Get relative xyz coordinates of point within that cell \n      x = x - X; \n      y = y - Y; \n      z = z - Z; \n  \n      // Wrap the integer cells at 255 (smaller integer period can be introduced here) \n      X = X & 255; \n      Y = Y & 255; \n      Z = Z & 255;\n  \n      // Calculate a set of eight hashed gradient indices \n      var gi000 = this.perm[X+this.perm[Y+this.perm[Z]]] % 12; \n      var gi001 = this.perm[X+this.perm[Y+this.perm[Z+1]]] % 12; \n      var gi010 = this.perm[X+this.perm[Y+1+this.perm[Z]]] % 12; \n      var gi011 = this.perm[X+this.perm[Y+1+this.perm[Z+1]]] % 12; \n      var gi100 = this.perm[X+1+this.perm[Y+this.perm[Z]]] % 12; \n      var gi101 = this.perm[X+1+this.perm[Y+this.perm[Z+1]]] % 12; \n      var gi110 = this.perm[X+1+this.perm[Y+1+this.perm[Z]]] % 12; \n      var gi111 = this.perm[X+1+this.perm[Y+1+this.perm[Z+1]]] % 12; \n  \n      // The gradients of each corner are now: \n      // g000 = grad3[gi000]; \n      // g001 = grad3[gi001]; \n      // g010 = grad3[gi010]; \n      // g011 = grad3[gi011]; \n      // g100 = grad3[gi100]; \n      // g101 = grad3[gi101]; \n      // g110 = grad3[gi110]; \n      // g111 = grad3[gi111]; \n      // Calculate noise contributions from each of the eight corners \n      var n000= this.dot(this.grad3[gi000], x, y, z); \n      var n100= this.dot(this.grad3[gi100], x-1, y, z); \n      var n010= this.dot(this.grad3[gi010], x, y-1, z); \n      var n110= this.dot(this.grad3[gi110], x-1, y-1, z); \n      var n001= this.dot(this.grad3[gi001], x, y, z-1); \n      var n101= this.dot(this.grad3[gi101], x-1, y, z-1); \n      var n011= this.dot(this.grad3[gi011], x, y-1, z-1); \n      var n111= this.dot(this.grad3[gi111], x-1, y-1, z-1); \n      // Compute the fade curve value for each of x, y, z \n      var u = this.fade(x); \n      var v = this.fade(y); \n      var w = this.fade(z); \n       // Interpolate along x the contributions from each of the corners \n      var nx00 = this.mix(n000, n100, u); \n      var nx01 = this.mix(n001, n101, u); \n      var nx10 = this.mix(n010, n110, u); \n      var nx11 = this.mix(n011, n111, u); \n      // Interpolate the four results along y \n      var nxy0 = this.mix(nx00, nx10, v); \n      var nxy1 = this.mix(nx01, nx11, v); \n      // Interpolate the two last results along z \n      var nxyz = this.mix(nxy0, nxy1, w); \n  \n      return nxyz; \n    }\n  }\n  \n  \n  const conversionFactor = 180 / Math.PI;\n  \n  let radianToDegrees = function(radian) {\n      return radian * conversionFactor;\n  }\n  let degreesToRadian = function(degrees) {\n      return degrees / conversionFactor;\n  }\n  \n  // Taken from https://github.com/wethegit/wtc-vector\n  /**\n   * A basic 2D Vector class that provides simple algebraic functionality in the form\n   * of 2D Vectors.\n   *\n   * We use Getters/setters for both principle properties (x & y) as well as virtual\n   * properties (rotation, length etc.).\n   *\n   * @class Vector\n   * @author Liam Egan <liam@wethecollective.com>\n   * @version 0.1.1\n   * @created Dec 19, 2016\n   */\n  class Vector {\n  \n      /**\n       * The Vector Class constructor\n       *\n       * @constructor\n       * @param {number} x \t\t\t\tThe x coord\n       * @param {number} y \t\t\t\tThe y coord\n       */\n    constructor(x, y){\n      this.x = x;\n      this.y = y;\n    }\n  \n    /**\n     * Resets the vector coordinates\n     *\n     * @public\n       * @param {number} x \t\t\t\tThe x coord\n       * @param {number} y \t\t\t\tThe y coord\n     */\n      reset(x, y) {\n      this.x = x;\n      this.y = y;\n      }\n  \n      /**\n       * Clones the vector\n       *\n       * @public\n       * @return {Vector}\t\t\t\t\tThe cloned vector\n       */\n    clone() {\n      return new Vector(this.x, this.y);\n    }\n  \n    /**\n     * Adds one vector to another.\n     *\n     * @public\n     * @chainable\n     * @param  {Vector}  vector The vector to add to this one\n     * @return {Vector}\t\t\t\t\tReturns itself, modified\n     */\n    add(vector) {\n      this.x += vector.x;\n      this.y += vector.y;\n      return this;\n    }\n    /**\n     * Clones the vector and adds the vector to it instead\n     *\n     * @public\n     * @chainable\n     * @param  {Vector}  vector The vector to add to this one\n     * @return {Vector}\t\t\t\t\tReturns the clone of itself, modified\n     */\n    addNew(vector) {\n      let v = this.clone();\n      return v.add(vector);\n    }\n  \n    /**\n     * Adds a scalar to the vector, modifying both the x and y\n     *\n     * @public\n     * @chainable\n     * @param  {number}  scalar The scalar to add to the vector\n     * @return {Vector}\t\t\t\t\tReturns itself, modified\n     */\n    addScalar(scalar) {\n      return this.add(new Vector(scalar, scalar));\n    }\n    /**\n     * Clones the vector and adds the scalar to it instead\n     *\n     * @public\n     * @chainable\n     * @param  {number}  scalar The scalar to add to the vector\n     * @return {Vector}\t\t\t\t\tReturns the clone of itself, modified\n     */\n    addScalarNew(scalar) {\n      let v = this.clone();\n      return v.addScalar(scalar);\n    }\n  \n    /**\n     * Subtracts one vector from another.\n     *\n     * @public\n     * @chainable\n     * @param  {Vector}  vector The vector to subtract from this one\n     * @return {Vector}\t\t\t\t\tReturns itself, modified\n     */\n    subtract(vector) {\n      this.x -= vector.x;\n      this.y -= vector.y;\n      return this;\n    }\n    /**\n     * Clones the vector and subtracts the vector from it instead\n     *\n     * @public\n     * @chainable\n     * @param  {Vector}  vector The vector to subtract from this one\n     * @return {Vector}\t\t\t\t\tReturns the clone of itself, modified\n     */\n    subtractNew(vector) {\n      let v = this.clone();\n      return v.subtract(vector);\n    }\n  \n    /**\n     * Subtracts a scalar from the vector, modifying both the x and y\n     *\n     * @public\n     * @chainable\n     * @param  {number}  scalar The scalar to subtract from the vector\n     * @return {Vector}\t\t\t\t\tReturns itself, modified\n     */\n    subtractScalar(scalar) {\n      return this.subtract(new Vector(scalar, scalar));\n    }\n    /**\n     * Clones the vector and subtracts the scalar from it instead\n     *\n     * @public\n     * @chainable\n     * @param  {number}  scalar The scalar to add to the vector\n     * @return {Vector}\t\t\t\t\tReturns the clone of itself, modified\n     */\n    subtractScalarNew(scalar) {\n      let v = this.clone();\n      return v.subtractScalar(scalar);\n    }\n  \n    /**\n     * Divides one vector by another.\n     *\n     * @public\n     * @chainable\n     * @param  {Vector}  vector The vector to divide this by\n     * @return {Vector}\t\t\t\t\tReturns itself, modified\n     */\n    divide(vector) {\n      if(vector.x !== 0) {\n        this.x /= vector.x\n      } else {\n        this.x = 0;\n      }\n      if(vector.y !== 0) {\n        this.y /= vector.y\n      } else {\n        this.y = 0;\n      }\n      return this;\n    }\n    /**\n     * Clones the vector and divides it by the vector instead\n     *\n     * @public\n     * @chainable\n     * @param  {Vector}  vector The vector to divide the clone by\n     * @return {Vector}\t\t\t\t\tReturns the clone of itself, modified\n     */\n    divideNew(vector) {\n      let v = this.clone();\n      return v.divide(vector);\n    }\n  \n    /**\n     * Divides the vector by a scalar.\n     *\n     * @public\n     * @chainable\n     * @param  {number}  scalar The scalar to divide both x and y by\n     * @return {Vector}\t\t\t\t\tReturns itself, modified\n     */\n    divideScalar(scalar) {\n      var v = new Vector(scalar, scalar);\n      return this.divide(v);\n    }\n    /**\n     * Clones the vector and divides it by the provided scalar.\n     *\n     * @public\n     * @chainable\n     * @param  {number}  scalar The scalar to divide both x and y by\n     * @return {Vector}\t\t\t\t\tReturns the clone of itself, modified\n     */\n    divideScalarNew(scalar) {\n      let v = this.clone();\n      return v.divideScalar(scalar);\n    }\n  \n    /**\n     * Multiplies one vector by another.\n     *\n     * @public\n     * @chainable\n     * @param  {Vector}  vector The vector to multiply this by\n     * @return {Vector}\t\t\t\t\tReturns itself, modified\n     */\n    multiply(vector) {\n      this.x *= vector.x;\n      this.y *= vector.y;\n      return this;\n    }\n    /**\n     * Clones the vector and multiplies it by the vector instead\n     *\n     * @public\n     * @chainable\n     * @param  {Vector}  vector The vector to multiply the clone by\n     * @return {Vector}\t\t\t\t\tReturns the clone of itself, modified\n     */\n    multiplyNew(vector) {\n      let v = this.clone();\n      return v.multiply(vector);\n    }\n  \n    /**\n     * Multiplies the vector by a scalar.\n     *\n     * @public\n     * @chainable\n     * @param  {number}  scalar The scalar to multiply both x and y by\n     * @return {Vector}\t\t\t\t\tReturns itself, modified\n     */\n    multiplyScalar(scalar) {\n      var v = new Vector(scalar, scalar);\n      return this.multiply(v);\n    }\n    /**\n     * Clones the vector and multiplies it by the provided scalar.\n     *\n     * @public\n     * @chainable\n     * @param  {number}  scalar The scalar to multiply both x and y by\n     * @return {Vector}\t\t\t\t\tReturns the clone of itself, modified\n     */\n    multiplyScalarNew(scalar) {\n      let v = this.clone();\n      return v.multiplyScalar(scalar);\n    }\n  \n    /**\n     * Alias of {@link Vector#multiplyScalar__anchor multiplyScalar}\n     */\n    scale(scalar) {\n      return this.multiplyScalar(scalar);\n    }\n    /**\n     * Alias of {@link Vector#multiplyScalarNew__anchor multiplyScalarNew}\n     */\n    scaleNew(scalar) {\n      return this.multiplyScalarNew(scalar);\n    }\n  \n    /**\n     * Rotates a vecor by a given amount, provided in radians.\n     *\n     * @public\n     * @chainable\n     * @param  {number}  radian The angle, in radians, to rotate the vector by\n     * @return {Vector}\t\t\t\t\tReturns itself, modified\n     */\n    rotate(radian) {\n        var x = (this.x * Math.cos(radian)) - (this.y * Math.sin(radian));\n        var y = (this.x * Math.sin(radian)) + (this.y * Math.cos(radian));\n  \n          this.x = x;\n          this.y = y;\n  \n        return this;\n    }\n    /**\n     * Clones the vector and rotates it by the supplied radian value\n     *\n     * @public\n     * @chainable\n     * @param  {number}  radian The angle, in radians, to rotate the vector by\n     * @return {Vector}\t\t\t\t\tReturns the clone of itself, modified\n     */\n    rotateNew(radian) {\n      let v = this.clone();\n      return v.rotate(radian);\n    }\n  \n      /**\n       * Rotates a vecor by a given amount, provided in degrees. Converts the degree\n       * value to radians and runs the rotaet method.\n       *\n       * @public\n       * @chainable\n       * @param  {number}  degrees The angle, in degrees, to rotate the vector by\n       * @return {Vector}\t\t\t\t\t\tReturns itself, modified\n       */\n    rotateDeg(degrees) {\n      return this.rotate(degreesToRadian(degrees));\n    }\n    /**\n     * Clones the vector and rotates it by the supplied degree value\n     *\n     * @public\n     * @chainable\n       * @param  {number}  degrees The angle, in degrees, to rotate the vector by\n     * @return {Vector}\t\t\t\t\t Returns the clone of itself, modified\n     */\n    rotateDegNew(degrees) {\n      return this.rotateNew(degreesToRadian(degrees));\n    }\n  \n    /**\n     * Alias of {@link Vector#rotate__anchor rotate}\n     */\n    rotateBy(radian) {\n          return this.rotate(radian);\n    }\n    /**\n     * Alias of {@link Vector#rotateNew__anchor rotateNew}\n     */\n    rotateByNew(radian) {\n      return this.rotateNew(radian);\n    }\n  \n    /**\n     * Alias of {@link Vector#rotateDeg__anchor rotateDeg}\n     */\n    rotateDegBy(degrees) {\n          return this.rotateDeg(degrees);\n    }\n    /**\n     * Alias of {@link Vector#rotateDegNew__anchor rotateDegNew}\n     */\n    rotateDegByNew(radian) {\n      return tjos.rotateDegNew(radian);\n    }\n  \n    /**\n     * Rotates a vector to a specific angle\n     *\n     * @public\n     * @chainable\n     * @param  {number}  radian The angle, in radians, to rotate the vector to\n     * @return {Vector}\t\t\t\t\tReturns itself, modified\n     */\n      rotateTo(radian) {\n          return this.rotate(radian-this.angle);\n      };\n    /**\n     * Clones the vector and rotates it to the supplied radian value\n     *\n     * @public\n     * @chainable\n     * @param  {number}  radian The angle, in radians, to rotate the vector to\n     * @return {Vector}\t\t\t\t\tReturns the clone of itself, modified\n     */\n      rotateToNew(radian) {\n      let v = this.clone();\n      return v.rotateTo(radian);\n      };\n  \n      /**\n       * Rotates a vecor to a given amount, provided in degrees. Converts the degree\n       * value to radians and runs the rotateTo method.\n       *\n       * @public\n       * @chainable\n       * @param  {number}  degrees The angle, in degrees, to rotate the vector to\n       * @return {Vector}\t\t\t\t\t\tReturns itself, modified\n       */\n    rotateToDeg(degrees) {\n      return this.rotateTo(degreesToRadian(degrees));\n    }\n    /**\n     * Clones the vector and rotates it to the supplied degree value\n     *\n     * @public\n     * @chainable\n       * @param  {number}  degrees The angle, in degrees, to rotate the vector to\n     * @return {Vector}\t\t\t\t\t Returns the clone of itself, modified\n     */\n    rotateToDegNew(degrees) {\n      return this.rotateToNew(degreesToRadian(degrees));\n    }\n  \n      /**\n       * Normalises the vector down to a length of 1 unit\n       *\n       * @public\n       * @chainable\n       * @return {Vector}\t\t\t\t\tReturns itself, modified\n       */\n      normalise() {\n          return this.divideScalar(this.length);\n      }\n      /**\n       * Clones the vector and normalises it\n       *\n       * @public\n       * @chainable\n       * @return {Vector}\t\t\t\t\tReturns a clone of itself, modified\n       */\n      normaliseNew() {\n          return this.divideScalarNew(this.length);\n      }\n  \n      /**\n       * Calculates the distance between this and the supplied vector\n       *\n       * @param  {Vector} vector The vector to calculate the distance from\n       * @return {number}        The distance between this and the supplied vector\n       */\n      distance(vector) {\n          return this.subtractNew(vector).length;\n      }\n  \n      /**\n       * Calculates the distance on the X axis between this and the supplied vector\n       *\n       * @param  {Vector} vector The vector to calculate the distance from\n       * @return {number}        The distance, along the x axis, between this and the supplied vector\n       */\n      distanceX(vector) {\n          return this.x - vector.x;\n      }\n  \n      /**\n       * Calculated the distance on the Y axis between this and the supplied vector\n       *\n       * @param  {Vector} vector The vector to calculate the distance from\n       * @return {number}        The distance, along the y axis, between this and the supplied vector\n       */\n      distanceY(vector) {\n          return this.y - vector.y;\n      }\n  \n  \n      /**\n       * Calculates the dot product between this and a supplied vector\n       *\n       * @example\n       * // returns -14\n       * new Vector(2, -3).dot(new Vector(-4, 2))\n       * new Vector(-4, 2).dot(new Vector(2, -3))\n       * new Vector(2, -4).dot(new Vector(-3, 2))\n       *\n       * @param  {Vector} vector The vector object against which to calculate the dot product\n       * @return {number}        The dot product of the two vectors\n       */\n      dot(vector) {\n          return (this.x * vector.x) + (this.y * vector.y);\n      }\n  \n      /**\n       * Calculates the cross product between this and the supplied vector.\n       *\n       * @example\n       * // returns -2\n       * new Vector(2, -3).cross(new Vector(-4, 2))\n       * new Vector(-4, 2).cross(new Vector(2, -3))\n       * // returns 2\n       * new Vector(2, -4).cross(new Vector(-3, 2))\n       *\n       * @param  {Vector} vector The vector object against which to calculate the cross product\n       * @return {number}        The cross product of the two vectors\n       */\n      cross(vector) {\n          return (this.x * vector.x) - (this.y * vector.y);\n      }\n  \n  \n    /**\n     * Getters and setters\n     */\n  \n    /**\n     * (getter/setter) The x value of the vector.\n     *\n     * @type {number}\n     * @default 0\n     */\n    set x(x) {\n      if(typeof x == 'number') {\n        this._x = x;\n      } else {\n        throw new TypeError('X should be a number');\n      }\n    }\n    get x() {\n      return this._x || 0;\n    }\n  \n   /**\n      * (getter/setter) The y value of the vector.\n      *\n      * @type {number}\n      * @default 0\n      */\n    set y(y) {\n      if(typeof y == 'number') {\n        this._y = y;\n      } else {\n        throw new TypeError('Y should be a number');\n      }\n    }\n    get y() {\n      return this._y || 0;\n    }\n  \n      /**\n      * (getter/setter) The length of the vector presented as a square. If you're using\n      * length for comparison, this is quicker.\n      *\n      * @type {number}\n      * @default 0\n      */\n    set lengthSquared(length) {\n      var factor;\n      if(typeof length == 'number') {\n        factor = length / this.lengthSquared;\n        this.multiplyScalar(factor);\n      } else {\n        throw new TypeError('length should be a number');\n      }\n    }\n    get lengthSquared() {\n      return (this.x * this.x) + (this.y * this.y);\n    }\n  \n      /**\n      * (getter/setter) The length of the vector\n      *\n      * @type {number}\n      * @default 0\n      */\n    set length(length) {\n      var factor;\n      if(typeof length == 'number') {\n        factor = length / this.length;\n        this.multiplyScalar(factor);\n      } else {\n        throw new TypeError('length should be a number');\n      }\n    }\n    get length() {\n      return Math.sqrt(this.lengthSquared);\n    }\n  \n      /**\n      * (getter/setter) The angle of the vector, in radians\n      *\n      * @type {number}\n      * @default 0\n      */\n    set angle(radian) {\n      if(typeof radian == 'number') {\n        this.rotateTo(radian);\n      } else {\n        throw new TypeError('angle should be a number');\n      }\n    }\n    get angle() {\n      return Math.atan2(this.y, this.x);\n    }\n  \n      /**\n      * (getter/setter) The angle of the vector, in radians\n      *\n      * @type {number}\n      * @default 0\n      */\n    set angleInDegrees(degrees) {\n      if(typeof degrees == 'number') {\n        this.rotateToDeg(degrees);\n      } else {\n        throw new TypeError('angle should be a number');\n      }\n    }\n    get angleInDegrees() {\n      return radianToDegrees(Math.atan2(this.y, this.x));\n    }\n  \n      /**\n       * (getter/setter) Vector width.\n     * Alias of {@link Vector#x x}\n       *\n       * @type {number}\n       */\n      set width(w) {\n          this.x = w;\n      }\n      get width() {\n          return this.x;\n      }\n  \n      /**\n       * (getter/setter) Vector height.\n     * Alias of {@link Vector#x x}\n       *\n       * @type {number}\n       */\n      set height(h) {\n          this.y = h;\n      }\n      get height() {\n          return this.y;\n      }\n  \n      /**\n       * (getter/setter) Vector area.\n       * @readonly\n       *\n       * @type {number}\n       */\n      get area() {\n          return this.x * this.y;\n      }\n  \n  }\n  \ninitialise();\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}